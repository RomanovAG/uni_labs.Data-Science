plot(rules, method= "scatterplot", c("support","lift"), shading = "confidence", control=list(max=2000, jitter=2), engine = 'plotly')
subrules <- rules[quality(rules)$confidence > 0.8]
plot(subrules, control = list(jitter = 2))
inspect(subrules)
rulesLift <- tail(sort(subrules, by = "lift"), 10)
inspect(rulesLift)
plot(rulesLift, method= "scatterplot", c("support","lift"), shading = "confidence", engine = 'plotly')
plot(subrules, method = "matrix", measure = c("confidence","lift"), engine = "grid", shading = c("lift","confidence"))
inspect(subrules)
high <- head(sort(rules, by="lift"), 3)
inspect(high)
plot(high, method="graph", engine='igraph')
train <- head(data, 8000)
test <- tail(data, 2000)
rulestr <-apriori(train, parameter = list(supp = 0.01, conf = 0,target = "rules", maxlen=25))
rulests <-apriori(test, parameter = list(supp = 0.01, conf = 0,target = "rules", maxlen=25))
int <- intersect(rulestr, rulests)
inspect(rulestr)
inspect(rulests)
inspect(int)
plot(rules, method= "scatterplot", c("support","lift"), shading = "confidence", control=list(max=2000, jitter=2), engine = 'plotly')
subrules <- rules[quality(rules)$confidence > 0.8]
plot(subrules, control = list(jitter = 2), engine = 'plotly')
inspect(subrules)
plot(rules, method= "scatterplot", c("support","lift"), shading = "confidence", control=list(max=2000, jitter=2), engine = 'plotly')
subrules <- rules[quality(rules)$confidence > 0.9]
plot(subrules, control = list(jitter = 2), engine = 'plotly')
inspect(subrules)
plot(rules, method= "scatterplot", c("support","lift"), shading = "confidence", control=list(max=2000, jitter=2), engine = 'plotly')
subrules <- rules[quality(rules)$confidence > 0.8]
plot(subrules, control = list(jitter = 2), engine = 'plotly')
inspect(subrules)
high <- head(sort(rules, by="confidence"), 3)
inspect(high)
plot(high, method="graph", engine='igraph')
high <- head(sort(rules, by="confidence"), 13)
inspect(high)
plot(high, method="graph", engine='igraph')
high <- head(sort(rules, by="lift"), 3)
inspect(high)
plot(high, method="graph", engine='igraph')
rules_lift <- tail(sort(subrules, by = "lift"), 10)
inspect(rules_lift)
plot(rules_lift, method= "scatterplot", c("support","lift"), shading = "confidence", engine = 'plotly')
subrules <- rules[quality(rules)$confidence > 0.1]
plot(subrules, control = list(jitter = 2))
inspect(subrules)
subrules <- rules[quality(rules)$confidence > 0.9]
plot(subrules, control = list(jitter = 2))
inspect(subrules)
rulesLift <- tail(sort(subrules, by = "lift"), 10)
inspect(rulesLift)
plot(rulesLift, method= "scatterplot", c("support","lift"), shading = "confidence", engine = 'plotly')
subrules <- rules[quality(rules)$confidence > 0.8]
plot(subrules, control = list(jitter = 2))
inspect(subrules)
rules_lift <- tail(sort(subrules, by = "lift"), 10)
inspect(rules_lift)
plot(rules_lift, method= "scatterplot", c("support","lift"), shading = "confidence", engine = 'plotly')
rules_lift <- tail(sort(subrules, by = "lift"), 10)
inspect(rules_lift)
plot(rules_lift, method= "scatterplot", c("support","lift"), shading = "confidence", engine = 'plotly')
plot(rules, method= "scatterplot", c("support","lift"), shading = "confidence", control=list(max=2000, jitter=2), engine = 'plotly')
subrules <- rules[quality(rules)$confidence > 0.8]
plot(subrules, control = list(jitter = 2), engine = 'plotly')
inspect(subrules)
rules_lift <- tail(sort(subrules, by = "lift"), 10)
inspect(rules_lift)
plot(rules_lift, method= "scatterplot", c("support","lift"), shading = "confidence", engine = 'plotly')
plot(rules, method= "scatterplot", c("support","lift"), shading = "confidence", control=list(max=2000, jitter=2), engine = 'plotly')
subrules <- rules[quality(rules)$confidence > 0.8]
plot(subrules, control = list(jitter = 2), engine = 'plotly')
inspect(subrules)
rules_lift <- tail(sort(subrules, by = "lift"), 10)
inspect(rules_lift)
plot(rules_lift, method= "scatterplot", c("support","lift"), shading = "confidence", engine = 'plotly')
rules_lift <- tail(sort(subrules, by = "lift"), 10)
inspect(rules_lift)
plot(rules_lift, method= "scatterplot", c("support","lift"), shading = "confidence", engine = 'plotly')
subrules <- rules[quality(rules)$confidence > 0.8]
plot(subrules, control = list(jitter = 2), engine = 'plotly')
inspect(subrules)
rules_lift <- tail(sort(subrules, by = "lift"), 10)
inspect(rules_lift)
plot(rules_lift, method= "scatterplot", c("support","lift"), shading = "confidence", engine = 'plotly')
subrules <- rules[quality(rules)$confidence > 0.8]
plot(subrules, control = list(jitter = 2))
inspect(subrules)
rulesLift <- tail(sort(subrules, by = "lift"), 10)
inspect(rulesLift)
plot(rulesLift, method= "scatterplot", c("support","lift"), shading = "confidence", engine = 'plotly')
library('arules')
library('arulesViz')
data <-read.transactions ("AssociationRules.csv",rm.duplicates = FALSE,format="basket",sep=" ",cols=NULL)
data@itemInfo
summary(data)
rules <-apriori(data, parameter = list(supp = 0.01, conf = 0,target = "rules", maxlen=25))
#11524
rules <-apriori(data, parameter = list(supp = 0.01, conf = 0.5,target = "rules", maxlen=25))
#1165
plot(rules, control = list(jitter =2)
library('arules')
library('arulesViz')
data <-read.transactions ("AssociationRules.csv",rm.duplicates = FALSE,format="basket",sep=" ",cols=NULL)
data@itemInfo
summary(data)
rules <-apriori(data, parameter = list(supp = 0.01, conf = 0,target = "rules", maxlen=25))
#11524
rules <-apriori(data, parameter = list(supp = 0.01, conf = 0.5,target = "rules", maxlen=25))
#1165
plot(rules, control = list(jitter =2))
plot(rules, method= "scatterplot", c("support","lift"), shading = "confidence", control=list(jitter=2))
plot(rules, method= "scatterplot", c("support","lift"), shading = "confidence", control=list(max=2000, jitter=2), engine = 'plotly')
subrules <- rules[quality(rules)$confidence > 0.8]
plot(subrules, control = list(jitter = 2))
inspect(subrules)
rulesLift <- tail(sort(subrules, by = "lift"), 10)
inspect(rulesLift)
plot(rulesLift, method= "scatterplot", c("support","lift"), shading = "confidence", engine = 'plotly')
plot(subrules, method = "matrix", measure = c("confidence","lift"), engine = "grid", shading = c("lift","confidence"))
inspect(subrules)
high <- head(sort(rules, by="lift"), 3)
inspect(high)
plot(high, method="graph", engine='igraph')
train <- head(data, 8000)
test <- tail(data, 2000)
rulestr <-apriori(train, parameter = list(supp = 0.01, conf = 0,target = "rules", maxlen=25))
rulests <-apriori(test, parameter = list(supp = 0.01, conf = 0,target = "rules", maxlen=25))
int <- intersect(rulestr, rulests)
inspect(rulestr)
inspect(rulests)
inspect(int)
plot(subrules, method = "matrix", measure = c("confidence","lift"), engine = "grid", shading = c("lift","confidence"))
inspect(subrules)
plot(subrules, method = "matrix", measure = c("confidence","lift"), engine = "grid", shading = c("lift","confidence"), interactive = TRUE)
inspect(subrules)
setwd("D:/Labs/Data Science/AR")
plot(subrules, method = "matrix", measure = c("confidence","lift"), engine = "grid", shading = c("lift","confidence"))
inspect(subrules)
help("plot")
help(engine)
help(&&engine)
help(??engine)
plot(subrules, method = "matrix", measure = c("confidence","lift"), shading = c("lift","confidence"))
high <- head(sort(rules, by="lift"), 3)
inspect(high)
plot(high, method="graph", engine='igraph')
plot(subrules, method = "matrix", measure = c("confidence","lift"), engine = "grid", shading = c("lift","confidence"))
inspect(subrules)
plot(subrules, method = "matrix", measure = c("confidence","lift"), engine = "grid", shading = c("lift","confidence"))
inspect(subrules)
highest <- head(sort(rules, by="lift"), 3)
inspect(highest)
plot(highest, method="graph", engine='igraph')
highest <- head(sort(rules, by="lift"), 3)
inspect(highest)
plot(highest, method="graph", engine='igraph')
highest <- head(sort(rules, by="lift"), 3)
inspect(highest)
plot(highest, method="graph", engine='igraph')
highest <- head(sort(rules, by="lift"), 3)
inspect(highest)
plot(highest, method="graph", engine='igraph')
highest <- head(sort(rules, by="lift"), 3)
inspect(highest)
plot(highest, method="graph", engine='igraph')
highest <- head(sort(rules, by="lift"), 3)
inspect(highest)
plot(highest, method="graph", engine='igraph')
highest <- head(sort(rules, by="lift"), 3)
inspect(highest)
plot(highest, method="graph", engine='igraph')
highest <- head(sort(rules, by="lift"), 3)
inspect(highest)
plot(highest, method="graph", engine='igraph')
highest <- head(sort(rules, by="lift"), 3)
inspect(highest)
plot(highest, method="graph", engine='igraph')
highest <- head(sort(rules, by="lift"), 3)
inspect(highest)
plot(highest, method="graph", engine='igraph')
highest <- head(sort(rules, by="lift"), 3)
inspect(highest)
plot(highest, method="graph", engine='igraph')
highest <- head(sort(rules, by="lift"), 3)
inspect(highest)
plot(highest, method="graph", engine='igraph')
highest <- head(sort(rules, by="lift"), 3)
inspect(highest)
plot(highest, method="graph", engine='igraph')
train <- head(df, 8000)
test <- tail(df, 2000)
train <- head(df, 8000)
test <- tail(df, 2000)
train_rules <-apriori(train, parameter = list(supp = 0.01, conf = 0,target = "rules"))
test_rules <-apriori(test, parameter = list(supp = 0.01, conf = 0,target = "rules"))
i <- intersect(train_rules, test_rules)
inspect(i)
i <- intersect(train_rules, test_rules)
inspect(train_rules)
inspect(test_rules)
i <- intersect(train_rules, test_rules)
inspect(train_rules)
inspect(test_rules)
inspect(i)
gc()
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
setwd("D:/Labs/Data Science/LinR")
df <- ("zeta.csv", header=TRUE)
setwd("D:/Labs/Data Science/LinR")
df <- ("zeta.csv", header = TRUE)
setwd("D:/Labs/Data Science/LinR")
df <- read.csv("zeta.csv", header = TRUE)
View(df)
setwd("D:/Labs/Data Science/LinR")
df <- read.csv("zeta.csv", header = TRUE)
df <- df[df["sex"] == "F"]
setwd("D:/Labs/Data Science/LinR")
df <- read.csv("zeta.csv", header = TRUE)
df <- df["sex"] == "F"
setwd("D:/Labs/Data Science/LinR")
df <- read.csv("zeta.csv", header = TRUE)
df <- df[df["sex"] == "F"]
setwd("D:/Labs/Data Science/LinR")
df <- read.csv("zeta.csv", header = TRUE)
#df <- df[df["sex"] == "F"]
setwd("D:/Labs/Data Science/LinR")
df <- read.csv("zeta.csv", header = TRUE)
df <- df["sex" == "F"]
setwd("D:/Labs/Data Science/LinR")
df <- read.csv("zeta.csv", header = TRUE)
df <- df["sex" == "F"]
View(df)
setwd("D:/Labs/Data Science/LinR")
df <- read.csv("zeta.csv", header = TRUE)
df <- df[sex == "F"]
setwd("D:/Labs/Data Science/LinR")
df <- read.csv("zeta.csv", header = TRUE)
df <- df[df$sex == "F"]
setwd("D:/Labs/Data Science/LinR")
df <- read.csv("zeta.csv", header = TRUE)
df <- df[sex = "F"]
setwd("D:/Labs/Data Science/LinR")
df <- read.csv("zeta.csv", header = TRUE)
df <- df["sex" = "F"]
setwd("D:/Labs/Data Science/LinR")
df <- read.csv("zeta.csv", header = TRUE)
df <- df["sex" == "F"]
setwd("D:/Labs/Data Science/LinR")
df <- read.csv("zeta.csv", header = TRUE)
df <- df[df["sex"] == "F"]
setwd("D:/Labs/Data Science/LinR")
df <- read.csv("zeta.csv", header = TRUE)
df <- df[df$sex == "F"]
View(df)
setwd("D:/Labs/Data Science/LinR")
df <- read.csv("zeta.csv", header = TRUE)
df2 <- df[df$sex == "F"]
setwd("D:/Labs/Data Science/LinR")
df <- read.csv("zeta.csv", header = TRUE)
df2 <- df[df$sex == "F"]
setwd("D:/Labs/Data Science/LinR")
df <- read.csv("zeta.csv", header = TRUE)
df2 <- df[df$sex == 'F']
setwd("D:/Labs/Data Science/LinR")
df <- read.csv("zeta.csv", header = TRUE)
df2 <- data.frame(df, df$sex == 'F')
View(df2)
View(df)
View(df2)
setwd("D:/Labs/Data Science/LinR")
df <- read.csv("zeta.csv", header = TRUE)
df2 <- data.frame(df[df$sex == 'F'])
setwd("D:/Labs/Data Science/LinR")
df <- read.csv("zeta.csv", header = TRUE)
df2 <- data.frame(df[df$sex == 'F'],)
setwd("D:/Labs/Data Science/LinR")
df <- read.csv("zeta.csv", header = TRUE)
df2 <- df[df[df$sex == 'F']]
setwd("D:/Labs/Data Science/LinR")
df <- read.csv("zeta.csv", header = TRUE)
df2 <- df[df$sex == 'F']
setwd("D:/Labs/Data Science/LinR")
df <- read.csv("zeta.csv", header = TRUE)
df2 <- df[df$sex == 'F']
setwd("D:/Labs/Data Science/LinR")
df <- read.csv("zeta.csv", header = TRUE)
df2 <- subset(df, sex =='F')
View(df2)
setwd("D:/Labs/Data Science/LinR")
df <- read.csv("zeta.csv", header = TRUE)
df <- subset(df, sex =='F')
View(df)
setwd("D:/Labs/Data Science/LinR")
df <- read.csv("zeta.csv", header = TRUE)
df <- subset(df, sex =='F')
df$sex <- NULL
df$zcta <- NULL
View(df)
View(df)
df <- subset(df, 8 < meaneducation && meaneducation < 18)
setwd("D:/Labs/Data Science/LinR")
df <- read.csv("zeta.csv", header = TRUE)
df <- subset(df, sex =='F')
df$sex <- NULL
df$zcta <- NULL
df <- subset(df, (8 < meaneducation && meaneducation < 18))
df <- subset(df, (meaneducation > 8 && meaneducation < 18))
df <- subset(df, (df$meaneducation > 8 && df$meaneducation < 18))
df <- subset(df, df$meaneducation > 8 && df$meaneducation < 18)
df <- subset(df, 8 < meaneducation & meaneducation < 18)
df <- subset(df, 8 < meaneducation & meaneducation < 18 & 10000 < meanhouseholdincome & meanhouseholdincome < 200000 & 0 < meanemployment & meanemployment < 3 & 20 < meanage & meanage < 60)
df["log_income"] = log10(df["meanhouseholdincome"])
df["log_income"] = log10(df["meanhouseholdincome"])
colnames(df) <- c("age", "education", "employment", "meanhouseholdincome", "log_income")
df <- subset(df, 8 < meaneducation & meaneducation < 18 & 10000 < meanhouseholdincome & meanhouseholdincome < 200000 & 0 < meanemployment & meanemployment < 3 & 20 < meanage & meanage < 60)
setwd("D:/Labs/Data Science/LinR")
df <- read.csv("zeta.csv", header = TRUE)
df <- subset(df, sex =='F')
df$sex <- NULL
df$zcta <- NULL
df <- subset(df, 8 < meaneducation & meaneducation < 18 & 10000 < meanhouseholdincome & meanhouseholdincome < 200000 & 0 < meanemployment & meanemployment < 3 & 20 < meanage & meanage < 60)
df["log_income"] = log10(df["meanhouseholdincome"])
colnames(df) <- c("X", "age", "education", "employment", "meanhouseholdincome", "log_income")
plot(df)
plot(df, df$age, df$log_income)
plot(df, x = df$age, y =  df$log_income)
plot(x = df$age, y =  df$log_income)
?lm
model <- lm(df$log_income ~ df$age)
View(model)
model <- lm(df$log_income ~ df$age)
plot(model)
model <- lm(df$log_income ~ df$age)
plot(model)
str(model)
model <- lm(df$log_income ~ df$age)
print(model)
plot(model)
str(model)
model <- lm(df$log_income ~ df$age)
print(model)
par(mfrow=c(2,2))
plot(model)
str(model)
model <- lm(df$log_income ~ df$age)
print(model)
par(mfrow=c(2,2))
plot(model)
#str(model)
model <- lm(df$log_income ~ df$age)
print(model)
str(model)
par(mfrow=c(2,2))
plot(model)
summary(model)
print(summary(model))
model <- lm(df$log_income ~ df$age)
print(model)
str(model)
par(mfrow=c(2,2))
ggplot(data=model, aes(x=log_income, y=age))
library(ggplot2)
model <- lm(df$log_income ~ df$age)
print(model)
str(model)
par(mfrow=c(2,2))
ggplot(data=model, aes(x=log_income, y=age))
model <- lm(df$log_income ~ df$age)
print(model)
str(model)
par(mfrow=c(2,2))
ggplot(data=df, aes(x=df$age, y=df$log_income))
model <- lm(df$log_income ~ df$age)
print(model)
str(model)
par(mfrow=c(2,2))
ggplot(data=df, aes(x=df$age, y=df$log_income))
model <- lm(df$log_income ~ df$age)
print(model)
str(model)
par(mfrow=c(2,2))
ggplot(data=df, aes(x=df$age, y=df$log_income)) + + geom_line()
model <- lm(df$log_income ~ df$age)
print(model)
str(model)
par(mfrow=c(2,2))
gg <- ggplot(data=df, aes(x=df$age, y=df$log_income)) + geom_line()
model <- lm(df$log_income ~ df$age)
print(model)
str(model)
par(mfrow=c(2,2))
gg <- ggplot(data=df, aes(x=df$age, y=df$log_income)) + geom_line()
gg
model <- lm(df$log_income ~ df$age)
print(model)
str(model)
par(mfrow=c(2,2))
gg <- ggplot(data=df, aes(x=df$age, y=df$log_income)) + geom_point()
gg
model <- lm(df$log_income ~ df$age)
print(model)
str(model)
par(mfrow=c(2,2))
ggplot(data=df, aes(x=df$age, y=df$log_income)) + geom_point()
View(gg)
View(gg)
rm(gg)
model <- lm(df$log_income ~ df$age)
print(model)
str(model)
par(mfrow=c(2,2))
ggplot(data=df, aes(x= as.factor(df$age), y=df$log_income)) + geom_point()
model <- lm(df$log_income ~ df$age)
print(model)
str(model)
par(mfrow=c(2,2))
ggplot(data=df, aes(x=df$age, y=df$log_income)) + geom_point()
ggplot(data=df, aes(x=df$age, y=df$log_income)) + geom_point()
model <- lm(df$log_income ~ df$age)
print(model)
str(model)
par(mfrow=c(2,2))
plot(model)
print(summary(model))
m1 <- lm(df$log_income ~ df$age)
print(m1)
str(m1)
par(mfrow=c(2,2))
plot(m1)
rm(model)
rm(model)
m2 <- lm(df$log_income ~ df$education)
print(m2)
str(m2)
#par(mfrow=c(2,2))
plot(m2)
m2 <- lm(df$log_income ~ df$education)
print(m2)
str(m2)
par(mfrow=c(2,2))
plot(m2)
print(summary(m1))
m1 <- lm(df$log_income ~ df$age)
print(m1)
str(m1)
par(mfrow=c(2,2))
plot(m1)
print(summary(m1))
m2 <- lm(df$log_income ~ df$education)
print(m2)
str(m2)
par(mfrow=c(2,2))
plot(m2)
print(summary(m2))
m2 <- lm(df$log_income ~ df$education)
print(m2)
str(m2)
par(mfrow=c(2,2))
plot(m2)
print(summary(m2))
m2 <- lm(df$log_income ~ df$education)
print(m2)
par(mfrow=c(2,2))
plot(m2)
print(summary(m2))
ggplot(data=df, aes(x=df$age, y=df$log_income)) + geom_point()
ggplot(data=df, aes(x=df$age, y=df$education)) + geom_point()
ggplot(data=df, aes(x=df$age, y=df$log_income)) + geom_point()
ggplot(data=df, aes(x=df$education, y=df$log_income)) + geom_point()
m1 <- lm(df$log_income ~ df$age)
print(m1)
str(m1)
par(mfrow=c(2,2))
plot(m1)
print(summary(m1))
m3 <- lm(formula = df$log_income ~ df$age + df$education + df$employment)
par(mfrow=c(2,2))
plot(m2)
print(summary(m2))
m3 <- lm(formula = df$log_income ~ df$age + df$education + df$employment)
par(mfrow=c(2,2))
plot(m3)
print(summary(m3))
pred <- predict(m3)
pred <- predict(m3)
plot(pred, df$log_income)
pred <- predict(m3)
plot(pred, df$log_income, type = "l")
pred <- predict(m3)
plot(pred, df$log_income)
pred <- predict(m3)
par(mfrow=c(1,1))
plot(df$log_income, df$log_income, type="l", xlab="true income", ylab="predicted income")
pred <- predict(m3)
par(mfrow=c(1,1))
plot(df$log_income, df$log_income, type="l", xlab="true income", ylab="predicted income")
points(df$log_income, pred)
pred <- predict(m3)
par(mfrow=c(1,1))
plot(df$log_income, df$log_income, type="l", xlab="true income", ylab="predicted income")
points(pred, df$log_income)
pred <- predict(m3)
par(mfrow=c(1,1))
plot(df$log_income, df$log_income, type="l", xlab="true income", ylab="predicted income")
points(pred, df$log_income)
pred <- predict(m3)
par(mfrow=c(1,1))
plot(df$log_income, df$log_income, type="l", xlab="true income", ylab="predicted income")
points(df$log_income, pred)
