rpart.plot(gini_tree)
printcp(gini_tree)
rpart.plot(gini_tree, type = 0)
printcp(class_tree)
rpart.plot(class_tree, type = 0)
gini_tree <- rpart(formula = MYDEPV ~ ., data = train, method = "class", parms = list(split = "gin"))
summary(gini_tree)
gini_tree <- rpart(formula = MYDEPV ~ ., data = train, method = "class", parms = list(split = "information"))
summary(gini_tree)
gini_tree <- rpart(formula = MYDEPV ~ ., data = train, method = "class", parms = list(split = "gini"))
summary(gini_tree)
gini_tree <- rpart(formula = MYDEPV ~ ., data = train, method = "class", parms = list(split = "gi"))
summary(gini_tree)
gini_tree <- rpart(formula = MYDEPV ~ ., data = train, method = "class", parms = list(split = "gini"))
summary(gini_tree)
gini_tree <- rpart(formula = MYDEPV ~ ., data = train, method = "class", parms = list(split = "info"))
summary(gini_tree)
gini_tree <- rpart(formula = MYDEPV ~ ., data = train, method = "class", parms = list(split = "inf"))
summary(gini_tree)
gini_tree <- rpart(formula = MYDEPV ~ ., data = train, method = "class", parms = list(split = "i"))
summary(gini_tree)
gini_tree <- rpart(formula = MYDEPV ~ ., data = train, method = "class", parms = list(split = "h"))
summary(gini_tree)
gini_tree <- rpart(formula = MYDEPV ~ ., data = train, method = "class", parms = list(split = "g"))
summary(gini_tree)
gini_tree <- rpart(formula = MYDEPV ~ ., data = train, method = "class", parms = list(split = "i"))
summary(gini_tree)
gini_tree <- rpart(formula = MYDEPV ~ ., data = train, method = "class", parms = list(split = "p"))
summary(gini_tree)
gini_tree <- rpart(formula = MYDEPV ~ ., data = train, method = "class", parms = list(split = "gini"))
summary(gini_tree)
printcp(gini_tree)
rpart.plot(gini_tree, type = 0)
prune(gini_tree)
prune(tree = gini_tree, cp = )
prune(tree = gini_tree, cp = )
help(prune)
"prune"
help(prune)
plotcp(gini_tree)
#prune(tree = gini_tree, cp = )
plotcp(gini_tree)
prune(tree = gini_tree, cp = 0.25769)
plotcp(gini_tree)
pruned <- prune(tree = gini_tree, cp = 0.25769)
printcp(pruned)
printcp(pruned)
rpart.plot(pruned, type = 0)
pruned <- prune(tree = gini_tree, cp = 0.25769)
printcp(pruned)
rpart.plot(pruned, type = 0)
paste("MC rate for zero-class: ", 10 / (10 + 76)))
paste("MC rate for zero-class: ", 10 / (10 + 76))
paste("MC rate for  one-class: ", 6 / (6 + 58))
paste("MC rate for zero-class: ", 10 / (10 + 76))
paste("MC rate for  one-class: ", 6 / (6 + 58))
pred3 <- predict(pruned, test, type = "class")
confusionMatrix(pred3, as.factor(test$MYDEPV))
paste("MC rate for zero-class: ", 7 / (7 + 79))
paste("MC rate for  one-class: ", 13 / (13 + 51))
paste("MC rate for zero-class: ", 7 / (7 + 79))
paste("MC rate for  one-class: ", 13 / (13 + 51))
(79 + 51) / (7 + 13)
paste("MC rate for zero-class: ", 7 / (7 + 79))
paste("MC rate for  one-class: ", 13 / (13 + 51))
(79 + 51 + 7 + 13) / (7 + 13)
paste("MC rate for zero-class: ", 7 / (7 + 79))
paste("MC rate for  one-class: ", 13 / (13 + 51))
(79 + 51) / (7 + 13 + 79 + 51)
paste("MC rate for zero-class: ", 7 / (7 + 79))
paste("MC rate for  one-class: ", 13 / (13 + 51))
paste("Overall: ", 1 - 0.8667)
pruned <- prune(tree = gini_tree, cp = 0.25769)
pruned <- prune(gini_tree, cp = gini_tree$cptable[which.min(tree_model$cptable[, "xerror"]), "CP"])
pruned <- prune(tree = gini_tree, cp = 0.25769)
pruned <- prune(gini_tree, cp = gini_tree$cptable[which.min(gini_tree$cptable[, "xerror"]), "CP"])
printcp(pruned)
rpart.plot(pruned, type = 0)
pruned <- prune(tree = gini_tree, cp = 0.25769)
pruned <- prune(gini_tree, cp = gini_tree$cptable[which.min(gini_tree$cptable[, "xerror"]), "CP"])
gini_tree$cptable
pruned <- prune(tree = gini_tree, cp = 0.25769)
pruned <- prune(gini_tree, cp = gini_tree$cptable[which.min(gini_tree$cptable[, "xerror"]), "CP"])
gini_tree$cptable[which.min(gini_tree$cptable[, "xerror"]), "CP"]
pruned <- prune(tree = gini_tree, cp = 0.25769)
pruned <- prune(gini_tree, cp = gini_tree$cptable[which.min(gini_tree$cptable[, "xerror"]), "CP"])
gini_tree$cptable[which.min(gini_tree$cptable[, "xerror"]), "xerror"]
pruned <- prune(tree = gini_tree, cp = 0.2576923)
#pruned <- prune(gini_tree, cp = gini_tree$cptable[which.min(gini_tree$cptable[, "xerror"]), "CP"])
gini_tree$cptable[which.min(gini_tree$cptable[, "xerror"]), "xerror"]
printcp(pruned)
rpart.plot(pruned, type = 0)
View(gini_tree)
pred2 <- predict(class_tree, test, type = "class")
cm2 <- confusionMatrix(pred2, as.factor(test$MYDEPV))
cm2
cm2$table[0,0]
print(paste("MC rate for zero-class: ", 10 / (10 + 76)))
print(paste("MC rate for  one-class: ", 6 / (6 + 58)))
cm2$table[,"Reference"]
print(paste("MC rate for zero-class: ", 10 / (10 + 76)))
print(paste("MC rate for  one-class: ", 6 / (6 + 58)))
class_tree <- rpart(formula = MYDEPV ~ ., data = train, method = "class", control = rpart.control(minsplit=1), parms=list(split=’information’))
class_tree <- rpart(formula = MYDEPV ~ ., data = train, method = "class", control = rpart.control(minsplit=1), parms=list(split=’information’))
class_tree <- rpart(formula = MYDEPV ~ ., data = train, method = "class", control = rpart.control(minsplit=1), parms=list(split="information"))
summary(class_tree)
printcp(class_tree)
rpart.plot(class_tree, type = 0)
class_tree <- rpart(formula = MYDEPV ~ ., data = train, method = "class", parms=list(split="information"))
summary(class_tree)
printcp(class_tree)
rpart.plot(class_tree, type = 0)
pred1 <- predict(class_tree, train, type = "class")
confusionMatrix(pred1, as.factor(train$MYDEPV))
print(paste("MC rate for zero-class: ", 26 / (26 + 314)))
print(paste("MC rate for  one-class: ", 19 / (19 + 241)))
gini_tree <- rpart(formula = MYDEPV ~ ., data = train, method = "class", parms = list(split = "gini"))
summary(gini_tree)
printcp(pruned)
rpart.plot(pruned, type = 0)
plotcp(gini_tree)
pruned <- prune(tree = gini_tree, cp = 0.2576923)
#pruned <- prune(gini_tree, cp = gini_tree$cptable[which.min(gini_tree$cptable[, "xerror"]), "CP"])
plotcp(gini_tree)
pruned <- prune(tree = gini_tree, cp = 0.011538)
#pruned <- prune(gini_tree, cp = gini_tree$cptable[which.min(gini_tree$cptable[, "xerror"]), "CP"])
printcp(pruned)
rpart.plot(pruned, type = 0)
plotcp(gini_tree)
pruned <- prune(tree = gini_tree, cp = 0.011538)
pruned <- prune(gini_tree, cp = gini_tree$cptable[which.min(gini_tree$cptable[, "xerror"]), "CP"])
printcp(pruned)
rpart.plot(pruned, type = 0)
printcp(pruned)
rpart.plot(pruned, type = 0)
plotcp(gini_tree)
pruned <- prune(tree = gini_tree, cp = 0.011538)
pruned <- prune(gini_tree, cp = gini_tree$cptable[which.min(gini_tree$cptable[, "xerror"]), "CP"])
printcp(pruned)
rpart.plot(pruned, type = 0)
printcp(gini_tree)
rpart.plot(gini_tree, type = 0)
plotcp(gini_tree)
pruned <- prune(tree = gini_tree, cp = 0.011538)
#pruned <- prune(gini_tree, cp = gini_tree$cptable[which.min(gini_tree$cptable[, "xerror"]), "CP"])
gini_tree$cptable[which.min(gini_tree$cptable[, "xerror"]), "CP"]
gini_tree <- rpart(formula = MYDEPV ~ ., data = train, method = "class", parms = list(split = "gini"))
summary(gini_tree)
printcp(gini_tree)
rpart.plot(gini_tree, type = 0)
printcp(gini_tree)
rpart.plot(gini_tree, type = 0)
gini_tree <- rpart(formula = MYDEPV ~ ., data = train, method = "class", parms = list(split = "gini"))
summary(gini_tree)
printcp(gini_tree)
rpart.plot(gini_tree, type = 0)
plotcp(gini_tree)
pruned <- prune(tree = gini_tree, cp = 0.011538)
#pruned <- prune(gini_tree, cp = gini_tree$cptable[which.min(gini_tree$cptable[, "xerror"]), "CP"])
gini_tree$cptable[which.min(gini_tree$cptable[, "xerror"]), "CP"]
printcp(pruned)
rpart.plot(pruned, type = 0)
gini_tree <- rpart(formula = MYDEPV ~ ., data = train, method = "class", parms = list(split = "gini"))
#summary(gini_tree)
printcp(gini_tree)
rpart.plot(gini_tree, type = 0)
plotcp(gini_tree)
pruned <- prune(tree = gini_tree, cp = 0.01153846)
#pruned <- prune(gini_tree, cp = gini_tree$cptable[which.min(gini_tree$cptable[, "xerror"]), "CP"])
gini_tree$cptable[which.min(gini_tree$cptable[, "xerror"]), "CP"]
gini_tree <- rpart(formula = MYDEPV ~ ., data = train, method = "class", parms = list(split = "gini"))
#summary(gini_tree)
printcp(gini_tree)
rpart.plot(gini_tree, type = 0)
plotcp(gini_tree)
pruned <- prune(tree = gini_tree, cp = 0.01153846)
#pruned <- prune(gini_tree, cp = gini_tree$cptable[which.min(gini_tree$cptable[, "xerror"]), "CP"])
gini_tree$cptable[which.min(gini_tree$cptable[, "xerror"]), "CP"]
plotcp(gini_tree)
pruned <- prune(tree = gini_tree, cp = 0.01)#153846)
#pruned <- prune(gini_tree, cp = gini_tree$cptable[which.min(gini_tree$cptable[, "xerror"]), "CP"])
gini_tree$cptable[which.min(gini_tree$cptable[, "xerror"]), "CP"]
printcp(pruned)
rpart.plot(pruned, type = 0)
class_tree <- rpart(formula = MYDEPV ~ Price + Income + Age, data = train, method = "class", parms=list(split="information"))
summary(class_tree)
printcp(class_tree)
rpart.plot(class_tree, type = 0)
pred1 <- predict(class_tree, train, type = "class")
confusionMatrix(pred1, as.factor(train$MYDEPV))
print(paste("MC rate for zero-class: ", 26 / (26 + 314)))
print(paste("MC rate for  one-class: ", 19 / (19 + 241)))
print(paste("Resubstitution error rate: ", (19 + 26) / (19 + 26 + 314 + 241)))
#install.packages("ROCR")
library(ROCR)
p <- predict(class_tree, train, type = "prob")
auc <- auc(train$MYDEPV, p[,2])
pred2 <- predict(class_tree, test, type = "class")
cm2 <- confusionMatrix(pred2, as.factor(test$MYDEPV))
cm2
print(paste("MC rate for zero-class: ", 10 / (10 + 76)))
print(paste("MC rate for  one-class: ", 6 / (6 + 58)))
gini_tree <- rpart(formula = MYDEPV ~ Price + Income + Age, data = train, method = "class", parms = list(split = "gini"))
#summary(gini_tree)
printcp(gini_tree)
rpart.plot(gini_tree, type = 0)
plotcp(gini_tree)
pruned <- prune(tree = gini_tree, cp = 0.01153846)
#pruned <- prune(gini_tree, cp = gini_tree$cptable[which.min(gini_tree$cptable[, "xerror"]), "CP"])
gini_tree$cptable[which.min(gini_tree$cptable[, "xerror"]), "CP"]
printcp(pruned)
rpart.plot(pruned, type = 0)
gini_tree <- rpart(formula = MYDEPV ~ Price + Income + Age, data = train, method = "class", parms = list(split = "gini"))
summary(gini_tree)
pred3 <- predict(pruned, test, type = "class")
confusionMatrix(pred3, as.factor(test$MYDEPV))
pred3 <- predict(pruned, train, type = "class")
confusionMatrix(pred3, as.factor(train$MYDEPV))
pred3 <- predict(pruned, train, type = "class")
confusionMatrix(pred3, as.factor(train$MYDEPV))
printcp(pruned)
rpart.plot(pruned, type = 0)
plotcp(gini_tree)
pruned <- prune(tree = gini_tree, cp = 0.01153846)
#pruned <- prune(gini_tree, cp = gini_tree$cptable[which.min(gini_tree$cptable[, "xerror"]), "CP"])
gini_tree$cptable[which.min(gini_tree$cptable[, "xerror"]), "CP"]
printcp(pruned)
rpart.plot(pruned, type = 0)
pred3 <- predict(pruned, train, type = "class")
confusionMatrix(pred3, as.factor(train$MYDEPV))
paste("MC rate for zero-class: ", 18 / (18 + 322))
paste("MC rate for  one-class: ", 43 / (43 + 217))
paste("Overall: ", 1 - 0.8667)
pred3 <- predict(pruned, train, type = "class")
cm3 <- confusionMatrix(pred3, as.factor(train$MYDEPV))
cm3
paste("MC rate for zero-class: ", 18 / (18 + 322))
paste("MC rate for  one-class: ", 43 / (43 + 217))
paste("Overall: ", 1 - cm3$overall)
View(cm3)
paste("MC rate for zero-class: ", 18 / (18 + 322))
paste("MC rate for  one-class: ", 43 / (43 + 217))
paste("Overall: ", 1 - cm3$overall[0])
paste("MC rate for zero-class: ", 18 / (18 + 322))
paste("MC rate for  one-class: ", 43 / (43 + 217))
paste("Overall: ", 1 - cm3$overall[1])
setwd("D:/Labs/Data Science/ARIMA")
setwd("D:/Labs/Data Science/ARIM")
setwd("D:/Labs/Data Science/ARIMA")
setwd("D:/Labs/Data Science/ARIMA")
df <- read.table("jj.dat")
View(df)
plot(df)
plot(x = df, y = df)
plot(x = df$V1, y = df$V1)
setwd("D:/Labs/Data Science/ARIMA")
df <- read.table("jj.dat")
df$ROW <- row.names(df)
plot(x = df$ROW, y = df$V1)
ggplot(df, mapping = aes(x = df$ROW, y = df$V1))
#plot(x = df$ROW, y = df$V1)
ggplot(df, mapping = aes(x = df$ROW, y = df$V1)) + geom_line()
#plot(x = df$ROW, y = df$V1)
ggplot(df, mapping = aes(x = df$ROW, y = df$V1)) + geom_point()
#plot(x = df$ROW, y = df$V1)
ggplot(df, mapping = aes(x = ROW, y = V1)) + geom_point()
#plot(x = df$ROW, y = df$V1)
setwd("D:/Labs/Data Science/ARIMA")
df <- read.table("jj.dat")
df$row <- row.names(df)
ggplot(df, mapping = aes(x = row, y = V1)) + geom_point()
#plot(x = df$ROW, y = df$V1)
#ggplot(df, mapping = aes(x = row, y = V1)) + geom_point()
plot(x = df$ROW, y = df$V1)
#ggplot(df, mapping = aes(x = row, y = V1)) + geom_point()
plot(x = df$row, y = df$V1)
help("plot")
#p <- predict(class_tree, train, type = "prob")
#auc <- auc(train$MYDEPV, p[,2])
#predObj <- prediction(p, train$MYDEPV)
#performance(prediction.obj = pred, measure = "tpr", x.measure = "fpr")
#plot(roc(train$MYDEPV, p[,2]))
#ggplot(df, mapping = aes(x = row, y = V1)) + geom_point()
plot(x = df$row, y = df$V1, type = "l")
acf(df)
par(mfrow=c(2,1))
acf(df)
par(mfrow=c(2,2))
acf(df)
par(mfrow=c(2,0))
par(mfrow=c(2,1))
acf(df)
par(mfrow=c(1,1))
acf(df)
par(mfrow=c(2,1))
acf(df)
setwd("D:/Labs/Data Science/ARIMA")
df <- read.table("jj.dat")
df$row <- row.names(df)
colnames(df) <- c("EPS", "row")
View(df)
#ggplot(df, mapping = aes(x = row, y = V1)) + geom_point()
plot(x = df$row, y = df$EPS, type = "l")
#ggplot(df, mapping = aes(x = row, y = V1)) + geom_point()
plot(x = df$row, y = df$EPS, type = "l")
#ggplot(df, mapping = aes(x = row, y = V1)) + geom_point()
plot(x = df$row, y = df$EPS, type = "l", main = "LOL")
#ggplot(df, mapping = aes(x = row, y = V1)) + geom_point()
plot(x = df$row, y = df$EPS, type = "l", main = "PLOT")
par(mfrow=c(2,1))
acf(df$EPS)
pacf(df$EPS)
par(mfrow=c(2,1))
acf(df$EPS)
par(mfrow=c(2,1))
pacf(df$EPS)
par(mfrow=c(2,1))
acf(df$EPS)
par(mfrow=c(2,1))
acf(df$EPS)
par(mfrow=c(2,1))
acf(df)
par(mfrow=c(2,1))
acf(df$eps)
par(mfrow=c(2,1))
acf(df)
pacf(df)
stat_df <- diff(df)
stat_df <- diff(df$EPS)
stat_df <- data.frame(diff(df$EPS))
View(stat_df)
#ggplot(df, mapping = aes(x = row, y = V1)) + geom_point()
plot(x = row.names(df), y = df$EPS, type = "l", main = "PLOT")
setwd("D:/Labs/Data Science/ARIMA")
df <- read.table("jj.dat")
colnames(df) <- c("EPS")
#ggplot(df, mapping = aes(x = row, y = V1)) + geom_point()
plot(x = row.names(df), y = df$EPS, type = "l", main = "PLOT")
par(mfrow=c(2,1))
acf(df)
stat_df <- data.frame(diff(df))
View(df)
stat_df <- diff(df)
stat_df <- diff(df)
stat_df <- diff(df$EPS)
stat_df <- data.frame(diff(df$EPS))
View(stat_df)
stat_df <- data.frame(diff(df$EPS))
plot(x = row.names(stat_df), y = stat_df$EPS, type = "l", main = "PLOT")
stat_df <- data.frame(diff(df$EPS))
plot(x = row.names(stat_df), y = stat_df$diff.df.EPS., type = "l", main = "PLOT")
stat_df <- data.frame(diff(df$EPS))
plot(x = row.names(stat_df), y = stat_df$diff.df.EPS., type = "l", main = "Stationary")
#ggplot(df, mapping = aes(x = row, y = V1)) + geom_point()
plot(x = row.names(df), y = df$EPS, type = "l", main = "Source")
stat_df <- data.frame(diff(df$EPS))
plot(x = row.names(stat_df), y = stat_df$diff.df.EPS., type = "l", main = "Stationary")
stat_df <- data.frame(diff(df$EPS))
plot(x = 1:length(stat_df), y = stat_df$diff.df.EPS., type = "l", main = "Stationary")
stat_df <- data.frame(diff(df$EPS))
plot(x = 0:length(stat_df), y = stat_df$diff.df.EPS., type = "l", main = "Stationary")
stat_df <- data.frame(diff(df$EPS))
plot(x = row.names(stat_df), y = stat_df$diff.df.EPS., type = "l", main = "Stationary")
par(mfrow=c(2,1))
acf(df)
pacf(df)
par(mfrow=c(2,1))
acf(stat_df)
pacf(stat_df)
df.fit <- arima(df, order = c(1, 1, 0), seasonal = list(order = c(1, 1, 0), period = 4), include.mean = FALSE)
df.fit
View(df.fit)
df.fit <- arima(df, order = c(1, 1, 0), seasonal = list(order = c(1, 1, 0), period = 4), include.mean = FALSE)
summary(df.fit)
df.fit <- arima(df, order = c(1, 1, 0), seasonal = list(order = c(1, 1, 0), period = 4), include.mean = FALSE)
df.fit
df.predict <- predict(df.fit, n.ahead = 12)
View(df.predict)
View(df.fit)
df.predict <- predict(df.fit, n.ahead = 12)
df.predict
df.predict <- predict(df.fit, n.ahead = 12)
df.predict$pred
df.predict <- predict(df.fit, n.ahead = 12)
plot(x = row.names(stat_df), y = df.predict$pred, type = "l", main = "Predicted")
df.predict <- predict(df.fit, n.ahead = 12)
plot(x = df.predict$pred, y = df.predict$pred, type = "l", main = "Predicted")
df.predict <- predict(df.fit, n.ahead = 12)
plot(x = row.names(df.predict$pred), y = df.predict$pred, type = "l", main = "Predicted")
df.predict <- predict(df.fit, n.ahead = 12)
plot(x = 1:length(df.predict$pred), y = df.predict$pred, type = "l", main = "Predicted")
df.fit <- arima(df, order = c(1, 1, 0), seasonal = list(order = c(1, 1, 0), period = 5), include.mean = FALSE)
df.fit
df.predict <- predict(df.fit, n.ahead = 12)
plot(x = 1:length(df.predict$pred), y = df.predict$pred, type = "l", main = "Predicted")
df.fit <- arima(df, order = c(1, 1, 0), seasonal = list(order = c(1, 1, 0), period = 4), include.mean = FALSE)
df.fit
df.predict <- predict(df.fit, n.ahead = 12)
plot(x = 1:length(df.predict$pred), y = df.predict$pred, type = "l", main = "Predicted")
df.predict <- predict(df.fit, n.ahead = 12)
plot(x = 0:length(df.predict$pred), y = df.predict$pred, type = "l", main = "Predicted")
df.predict <- predict(df.fit, n.ahead = 12)
plot(x = 2:length(df.predict$pred), y = df.predict$pred, type = "l", main = "Predicted")
df.predict <- predict(df.fit, n.ahead = 12)
plot(x = 1:length(df.predict$pred), y = df.predict$pred, type = "l", main = "Predicted")
#ggplot(df, mapping = aes(x = row, y = V1)) + geom_point()
plot(x = row.names(df), y = df$EPS, type = "l", main = "Source", xlab = "Month")
#ggplot(df, mapping = aes(x = row, y = V1)) + geom_point()
plot(x = row.names(df), y = df$EPS, type = "l", main = "Source", xlab = "Month", ylab = "EPS")
stat_df <- data.frame(diff(df$EPS))
plot(x = row.names(stat_df), y = stat_df$diff.df.EPS., type = "l", main = "Stationary", xlab = "Month", ylab = "EPS")
df.predict <- predict(df.fit, n.ahead = 12)
plot(x = 1:length(df.predict$pred), y = df.predict$pred, type = "l", main = "Predicted", xlab = "Month", ylab = "EPS")
#ggplot(df, mapping = aes(x = row, y = V1)) + geom_point()
plot(x = row.names(df), y = df$EPS, type = "l", main = "Source", xlab = "Quarter", ylab = "EPS")
stat_df <- data.frame(diff(df$EPS))
plot(x = row.names(stat_df), y = stat_df$diff.df.EPS., type = "l", main = "Stationary", xlab = "Quarter", ylab = "EPS")
par(mfrow=c(2,1))
acf(stat_df)
pacf(stat_df)
df.fit <- arima(df, order = c(1, 1, 0), seasonal = list(order = c(1, 1, 0), period = 4), include.mean = FALSE)
df.fit
df.predict <- predict(df.fit, n.ahead = 12)
plot(x = 1:length(df.predict$pred), y = df.predict$pred, type = "l", main = "Predicted", xlab = "Month", ylab = "EPS")
log_df <- data.frame(log10(df$EPS))
View(log_df)
log_df <- data.frame(log10(df$EPS))
colnames(log_df) <- c("Log10(EPS)")
log_df <- data.frame(log10(df$EPS))
colnames(log_df) <- c("Log10(EPS)")
plot(x = row.names(log_df), y = log_df$`Log10(EPS)`, type = "l", main = "Log of EPS", xlab = "Quarter", ylab = "EPS")
log_df <- data.frame(log10(df$EPS))
colnames(log_df) <- c("Log10(EPS)")
plot(x = row.names(log_df), y = log_df$`Log10(EPS)`, type = "l", main = "Log of EPS", xlab = "Quarter", ylab = "Log10(EPS)")
stat_log_df <- data.frame(diff(log_df$`Log10(EPS)`))
stat_log_df <- data.frame(diff(log_df$`Log10(EPS)`))
plot(x = row.names(stat_log_df), y = stat_log_df$diff.log_df..Log10.EPS..., type = "l", main = "Log of EPS Stationary", xlab = "Quarter", ylab = "Log10(EPS)")
par(mfrow=c(2,1))
acf(df)
pacf(df)
par(mfrow=c(2,1))
acf(df)
pacf(df)
par(mfrow=c(2,1))
acf(stat_df)
pacf(stat_df)
par(mfrow=c(2,1))
acf(stat_log_df)
pacf(stat_log_df)
df.fit <- arima(df, order = c(1, 1, 0), seasonal = list(order = c(1, 1, 0), period = 4), include.mean = FALSE)
df.fit
df.predict <- predict(df.fit, n.ahead = 12)
plot(x = 1:length(df.predict$pred), y = df.predict$pred, type = "l", main = "Predicted", xlab = "Month", ylab = "EPS")
log_df.fit <- arima(log_df, order = c(1, 1, 0), seasonal = list(order = c(1, 1, 0), period = 4), include.mean = FALSE)
log_df.fit
df.predict <- predict(df.fit, n.ahead = 12)
plot(x = 1:length(df.predict$pred), y = df.predict$pred, type = "l", main = "Predicted", xlab = "Quarter", ylab = "EPS")
log_df.fit <- arima(log_df, order = c(1, 1, 0), seasonal = list(order = c(1, 1, 0), period = 4), include.mean = FALSE)
log_df.fit
log_df.predict <- predict(log_df.fit, n.ahead = 12)
plot(x = 1:length(log_df.predict$pred), y = log_df.predict$pred, type = "l", main = "Predicted", xlab = "Month", ylab = "EPS")
log_df.predict <- predict(log_df.fit, n.ahead = 12)
plot(x = 1:length(log_df.predict$pred), y = log_df.predict$pred, type = "l", main = "Predicted", xlab = "Quarter", ylab = "EPS")
arima.sim(df.fit, n = 10_000)
arima.sim(df.fit, n = 10000)
ts.sim_AR4 <- arima.sim(n = 10000, list(ar = c(0.9, -0.5, .2, -.3)))
ts.sim_AR4 <- arima.sim(n = 10000, list(ar = c(0.9, -0.5, .2, -.3)))
plot(ts.sim_AR4)
ts.sim_AR4 <- arima.sim(n = 10000, list(ar = c(0.9, -0.5, .2, -.3)))
plot(ts.sim_AR4, type = "l")
ts.sim_AR4 <- arima.sim(n = 10000, list(ar = c(0.9, -0.5, .2, -.3)))
plot(ts.sim_AR4, type = "p")
ts.sim_AR4 <- arima.sim(n = 10000, list(ar = c(0.9, -0.5, .2, -.3)))
plot(ts.sim_AR4, type = "S")
ts.sim_AR4 <- arima.sim(n = 10000, list(ar = c(0.9, -0.5, .2, -.3)))
plot(ts.sim_AR4, type = "n")
ts.sim_AR4 <- arima.sim(n = 10000, list(ar = c(0.9, -0.5, .2, -.3)))
plot(ts.sim_AR4, type = "l")
ts.sim_AR4 <- arima.sim(n = 10000, list(ar = c(0.9, -0.5, .2)))
plot(ts.sim_AR4, type = "l")
ts.sim_AR4 <- arima.sim(n = 10000, list(ar = c(0.9, -0.5)))
plot(ts.sim_AR4, type = "l")
ts.sim_AR4 <- arima.sim(n = 10000, list(ar = c(0.9)))
plot(ts.sim_AR4, type = "l")
ts.sim_AR4 <- arima.sim(n = 10000, list(ar = c(1)))
ts.sim_AR4 <- arima.sim(n = 10000, list(ar = c(.99)))
plot(ts.sim_AR4, type = "l")
ts.sim_AR4 <- arima.sim(n = 10000, list(ar = c(.999)))
plot(ts.sim_AR4, type = "l")
ts.sim_AR4 <- arima.sim(n = 10000, list(ar = c(.9999)))
plot(ts.sim_AR4, type = "l")
ts.sim_AR4 <- arima.sim(n = 10000, list(ar = c(.99999)))
plot(ts.sim_AR4, type = "l")
ts.sim_AR4 <- arima.sim(n = 10000, list(ar = c(0.9, -0.5, .2, -.3)))
plot(ts.sim_AR4, type = "l")
acf(ts.sim_AR4)
acf(ts.sim_AR4)
pacf(ts.sim_AR4)
par(mfrow = c(2, 1))
acf(ts.sim_AR4)
pacf(ts.sim_AR4)
acf(ts.sim_AR4)
pacf(ts.sim_AR4)
acf(stat_log_df)
pacf(stat_log_df)
#par(mfrow=c(2,1))
acf(df)
pacf(df)
sim_MA4 <- arima.sim(n = 10000, list( ma = c(-1.9, 1.7, -1.5, 1.5)))
plot(sim_MA4, type = "l")
acf(sim_MA4)
pacf(sim_MA4)
